# Optimized multi-stage build for production backend
FROM node:20-alpine AS deps

RUN npm install -g pnpm && apk add --no-cache python3 make g++

WORKDIR /app

COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend/package.json ./apps/backend/

RUN pnpm install --frozen-lockfile

# Build stage
FROM node:20-alpine AS builder

RUN npm install -g pnpm

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/backend/package.json ./apps/backend/
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend ./apps/backend

WORKDIR /app/apps/backend

# Generate Prisma Client and build
RUN npx prisma generate
RUN pnpm build

# Production stage - minimal
FROM node:20-alpine AS production

RUN apk add --no-cache wget dumb-init

WORKDIR /app

# Copy only production dependencies
COPY --from=builder /app/apps/backend/package.json ./package.json

# Install ONLY production dependencies (no dev deps)
RUN npm install -g pnpm && \
    pnpm install --prod --no-optional && \
    npm uninstall -g pnpm

# Copy built app and prisma files
COPY --from=builder /app/apps/backend/dist ./dist
COPY --from=builder /app/apps/backend/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Create non-root user BEFORE copying files
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs && \
    mkdir -p uploads && \
    chown -R backend:nodejs /app

USER backend

EXPOSE 3004

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1

ENV NODE_ENV=production PORT=3004

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["node", "dist/main.js"]
