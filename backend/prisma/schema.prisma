generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid()) @db.VarChar(36)
  username     String    @unique @db.VarChar(50)
  displayName  String    @db.VarChar(100)
  password     String    @db.VarChar(255)
  role         String    @default("user") @db.VarChar(20) // admin, user, viewer
  isActive     Boolean   @default(true)
  createdBy    String?   @db.VarChar(36)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  creator         User?            @relation("UserCreator", fields: [createdBy], references: [id])
  createdUsers    User[]           @relation("UserCreator")
  transactions    Transaction[]
  categories      Category[]
  importLogs      ImportLog[]
  userPreferences UserPreferences?

  @@index([username])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Transaction {
  id           String    @id @db.VarChar(36)
  amount       Decimal   @db.Decimal(15, 2)
  currency     String    @db.VarChar(3)
  date         DateTime  @db.Date
  merchant     String    @db.VarChar(200)
  type         String    @db.VarChar(20)
  description  String    @default("")
  categoryId   String?   @db.VarChar(36)
  isSelected   Boolean   @default(true)
  hidden       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  hash         String?   @db.VarChar(50)
  observations String?   @db.VarChar(500)
  userId       String    @db.VarChar(36)

  category     Category? @relation(fields: [categoryId], references: [id])
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([merchant])
  @@index([type])
  @@index([categoryId])
  @@index([currency])
  @@index([createdAt])
  @@index([hash])
  @@index([hidden])
  @@index([userId])
  @@index([userId, date])
  @@map("transactions")
}

model Category {
  id           String            @id @db.VarChar(36)
  name         String            @db.VarChar(100)
  type         String            @db.VarChar(20)
  color        String            @default("#3B82F6") @db.VarChar(7)
  icon         String            @default("ðŸ’°") @db.VarChar(10)
  isActive     Boolean           @default(true)
  parentId     String?           @db.VarChar(36)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  annualBudget Decimal?          @db.Decimal(15, 2)
  isGlobal     Boolean           @default(false) // Categories shared by all users
  userId       String?           @db.VarChar(36) // null for global categories

  parent       Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children     Category[]        @relation("CategoryHierarchy")
  patterns     CategoryPattern[]
  transactions Transaction[]
  user         User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, type, userId])
  @@index([type])
  @@index([isActive])
  @@index([parentId])
  @@index([userId])
  @@index([isGlobal])
  @@map("categories")
}

model ImportLog {
  id                String    @id @db.VarChar(36)
  filename          String    @db.VarChar(500)
  totalProcessed    Int       @default(0)
  imported          Int       @default(0)
  duplicatesSkipped Int       @default(0)
  errors            Int       @default(0)
  categorized       Int       @default(0)
  status            String    @db.VarChar(20)
  errorDetails      Json?
  metadata          Json?
  startedAt         DateTime  @default(now())
  completedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @db.VarChar(36)

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([startedAt])
  @@index([userId])
  @@map("import_logs")
}

model AppSettings {
  id          String   @id @db.VarChar(36)
  key         String   @unique @db.VarChar(100)
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("app_settings")
}

model UserPreferences {
  id        String   @id @default(cuid()) @db.VarChar(36)
  userId    String   @unique @db.VarChar(36)
  currency  String   @default("EUR") @db.VarChar(3)
  language  String   @default("en") @db.VarChar(5)
  theme     String   @default("light") @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model CategoryPattern {
  id            String   @id @db.VarChar(36)
  pattern       String   @db.VarChar(200)
  priority      Int      @default(0)
  applyToFuture Boolean  @default(true)
  categoryId    String   @db.VarChar(36)
  createdAt     DateTime @default(now())
  isActive      Boolean  @default(true)
  matchCount    Int      @default(0)
  patternType   String   @db.VarChar(20)
  updatedAt     DateTime @updatedAt
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([patternType])
  @@index([isActive])
  @@index([priority])
  @@map("category_patterns")
}
