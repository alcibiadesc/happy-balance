# Slim optimized backend (using tsx, ~600MB instead of 2.3GB)
FROM node:20-alpine AS base

RUN npm install -g pnpm@9 && \
    apk add --no-cache wget dumb-init python3 make g++

FROM base AS deps

WORKDIR /app

# Copy workspace files
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend/package.json ./apps/backend/

# Install dependencies
RUN pnpm install --frozen-lockfile --prefer-offline

# Copy backend source and generate Prisma
COPY apps/backend/prisma ./apps/backend/prisma
WORKDIR /app/apps/backend
RUN npx prisma generate

FROM base AS runtime

WORKDIR /app

# Copy workspace configuration
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY --from=deps /app/apps/backend/package.json ./apps/backend/

# Copy only necessary node_modules
COPY --from=deps /app/node_modules ./node_modules

# Copy backend source
COPY apps/backend/src ./apps/backend/src
COPY apps/backend/tsconfig.json ./apps/backend/

# Prisma already generated in deps stage, just copy the schema
COPY apps/backend/prisma ./apps/backend/prisma

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs && \
    mkdir -p /app/uploads && \
    chown -R backend:nodejs /app

# Clean up unnecessary files to reduce size
RUN rm -rf /root/.npm /root/.cache /tmp/* && \
    find /app/node_modules -name "*.md" -delete && \
    find /app/node_modules -name "*.ts" -not -path "*/node_modules/@types/*" -delete && \
    find /app/node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true

USER backend

EXPOSE 3004

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1

ENV NODE_ENV=production PORT=3004

WORKDIR /app/apps/backend

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["pnpm", "dev"]
