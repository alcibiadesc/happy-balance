# Multi-stage build for production backend (Best practices with pnpm deploy)
FROM node:20-alpine AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# Build stage - install all deps and build
FROM base AS build
COPY . /usr/src/app
WORKDIR /usr/src/app
# Use BuildKit cache mount for faster installs
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install
# Generate Prisma Client
WORKDIR /usr/src/app/apps/backend
RUN pnpm prisma generate
# Build application
RUN pnpm build

# Deploy stage - create production-ready standalone package
WORKDIR /usr/src/app
RUN pnpm deploy --filter=happy-balance-backend --prod /prod/backend

# Generate Prisma Client in deployed directory
WORKDIR /prod/backend
RUN npx prisma generate

# Production stage - minimal runtime image
FROM base AS production

RUN apk add --no-cache wget dumb-init && \
    rm -rf /root/.npm

WORKDIR /app

# Copy deployed package (all dependencies resolved, no symlinks, includes generated Prisma Client)
COPY --from=build /prod/backend /app

# Copy built application
COPY --from=build /usr/src/app/apps/backend/dist ./dist

# Create uploads directory and set permissions
RUN mkdir -p uploads && \
    addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs && \
    chown -R backend:nodejs /app

USER backend

EXPOSE 3004

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1

ENV NODE_ENV=production \
    PORT=3004 \
    NODE_OPTIONS="--max-old-space-size=512"

ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "npx prisma db push --accept-data-loss && node dist/main.js"]
