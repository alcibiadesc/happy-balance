# ====================================
# Stage 1: Dependencies  
# ====================================
FROM node:20-alpine AS deps

RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend/package.json ./apps/backend/

RUN pnpm install --frozen-lockfile --prefer-offline

# ====================================
# Stage 2: Build
# ====================================
FROM node:20-alpine AS builder

RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY pnpm-workspace.yaml package.json ./
COPY apps/backend ./apps/backend

WORKDIR /app/apps/backend

# Generate Prisma client and build (using pnpm instead of npx)
RUN pnpm prisma generate && pnpm build

# ====================================
# Stage 3: Production Dependencies
# ====================================
FROM node:20-alpine AS prod-deps

RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend/package.json ./apps/backend/

RUN pnpm install --prod --frozen-lockfile --prefer-offline && pnpm store prune

# Generate Prisma client for production
WORKDIR /app/apps/backend
COPY apps/backend/prisma ./prisma
RUN pnpm prisma generate

# ====================================
# Stage 4: Production Runtime
# ====================================
FROM node:20-alpine AS production

RUN apk add --no-cache wget dumb-init && \
    corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy production node_modules
COPY --from=prod-deps /app/node_modules ./node_modules
COPY --from=prod-deps /app/apps/backend/node_modules ./apps/backend/node_modules

# Copy built application
COPY --from=builder /app/apps/backend/dist ./dist
COPY --from=builder /app/apps/backend/prisma ./prisma
COPY --from=builder /app/apps/backend/package.json ./package.json

# Create directories and set permissions
RUN mkdir -p uploads && \
    addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs && \
    chown -R backend:nodejs /app

USER backend

EXPOSE 3004

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1

ENV NODE_ENV=production \
    PORT=3004 \
    NODE_OPTIONS="--max-old-space-size=512"

ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "pnpm prisma migrate deploy && node dist/main.js"]
