# Multi-stage build for production backend (Optimized)
FROM node:20-alpine AS deps

RUN npm install -g pnpm

WORKDIR /app

COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend/package.json ./apps/backend/

RUN pnpm install --frozen-lockfile --prefer-offline

# Build stage
FROM node:20-alpine AS builder

RUN npm install -g pnpm

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/backend/package.json ./apps/backend/
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/backend ./apps/backend

WORKDIR /app/apps/backend
RUN npx prisma generate && pnpm build

# Production stage
FROM node:20-alpine AS production

RUN npm install -g pnpm && \
    apk add --no-cache wget dumb-init && \
    rm -rf /root/.npm

WORKDIR /app

# Copy all necessary files from builder
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-workspace.yaml ./
COPY --from=builder /app/pnpm-lock.yaml ./
COPY --from=builder /app/apps/backend/package.json ./apps/backend/
COPY --from=builder /app/apps/backend/dist ./apps/backend/dist
COPY --from=builder /app/apps/backend/prisma ./apps/backend/prisma

# Create uploads directory and set permissions
RUN mkdir -p apps/backend/uploads && \
    addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001 -G nodejs && \
    chown -R backend:nodejs /app

USER backend

WORKDIR /app/apps/backend

EXPOSE 3004

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1

ENV NODE_ENV=production \
    PORT=3004 \
    NODE_OPTIONS="--max-old-space-size=512"

ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "pnpm prisma migrate deploy && node dist/main.js"]
