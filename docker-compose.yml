version: '3.8'

services:
  # Database
  postgres:
    image: postgres:17-alpine
    container_name: expense-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-happy_balance}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-happy_balance}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - expense-tracker

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: expense-tracker-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-happy_balance}

      # Server
      PORT: ${BACKEND_PORT:-3004}
      NODE_ENV: ${NODE_ENV:-production}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}

      # File upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_DIR: ${UPLOAD_DIR:-uploads}

      # Authentication
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your-super-secret-access-key-change-this-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production}

      # Admin User (default credentials - CHANGE IN PRODUCTION!)
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    ports:
      - "${BACKEND_PORT:-3004}:${BACKEND_PORT:-3004}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - expense-tracker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-3004}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (optional - for full containerized setup)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: expense-tracker-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3004/api}
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - expense-tracker

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  expense-tracker:
    driver: bridge