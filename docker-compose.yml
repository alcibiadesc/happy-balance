# Happy Balance - Production Deployment
# Ready-to-use Docker Compose configuration
#
# Usage:
# - Production: docker compose up -d
# - Development: docker compose up -d postgres && pnpm dev

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: happy-balance-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: happy_balance
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    image: alcibiadesc/happy-balance:backend-v2
    container_name: happy-balance-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/happy_balance
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your-super-secret-jwt-key-change-in-production-32chars-min}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production-32chars}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      PORT: 3004
      # CORS: Allow all origins by default (works on any IP/hostname)
      # For production, set CORS_ORIGIN in .env to your specific domain
      CORS_ORIGIN: "${CORS_ORIGIN:-*}"
    ports:
      - "${BACKEND_PORT:-3004}:3004"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # SvelteKit Frontend
  frontend:
    image: alcibiadesc/happy-balance:frontend-v2
    container_name: happy-balance-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      # Internal URL for SSR (server-side rendering) - uses Docker network
      INTERNAL_API_URL: http://backend:3004/api
      # Client-side URL is auto-detected from browser location - no config needed!
      PORT: 3000
      ORIGIN: ${ORIGIN:-http://localhost:3000}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    name: happy_balance_postgres_data
  uploads_data:
    name: happy_balance_uploads_data