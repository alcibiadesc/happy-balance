// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CORE DOMAIN ENTITIES
// ================================

model Account {
  id          String @id @default(uuid())
  name        String
  type        String // "MAIN", "SAVINGS", "INVESTMENT"
  balance     Float  @default(0)
  currency    String @default("EUR")
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transactions Transaction[]
  
  @@map("accounts")
}

model Category {
  id          String @id @default(uuid())
  name        String
  type        CategoryType
  color       String @default("#3B82F6")
  icon        String @default("ðŸ“Š")
  parentId    String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  transactions Transaction[]
  rules       CategorizationRule[]
  budgets     Budget[]

  @@map("categories")
}

model Transaction {
  id                String @id @default(uuid())
  
  // N26 CSV Fields
  bookingDate       DateTime
  valueDate         DateTime
  partnerName       String
  partnerIban       String?
  type              String
  paymentReference  String?
  
  // Amounts
  amount            Float
  originalAmount    Float?
  originalCurrency  String?
  exchangeRate      Float?
  
  // Categorization
  categoryId        String?
  accountId         String
  isRecurring       Boolean @default(false)
  confidence        Float?  // Categorization confidence (0-1)
  
  // Metadata
  hash              String @unique // For duplicate detection
  importJobId       String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  category          Category? @relation(fields: [categoryId], references: [id])
  account           Account @relation(fields: [accountId], references: [id])
  importJob         ImportJob? @relation(fields: [importJobId], references: [id])
  tags              TransactionTag[]

  // Indexes
  @@index([bookingDate])
  @@index([partnerName])
  @@index([categoryId])
  @@index([accountId])
  @@index([hash])
  
  @@map("transactions")
}

model Tag {
  id          String @id @default(uuid())
  name        String @unique
  color       String @default("#6B7280")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transactions TransactionTag[]

  @@map("tags")
}

model TransactionTag {
  transactionId String
  tagId         String
  createdAt     DateTime @default(now())

  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tag           Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([transactionId, tagId])
  @@map("transaction_tags")
}

// ================================
// CATEGORIZATION SYSTEM
// ================================

model CategorizationRule {
  id          String @id @default(uuid())
  categoryId  String
  field       String // "partnerName", "paymentReference", "amount", etc.
  operator    RuleOperator
  value       String
  confidence  Float @default(0.8)
  isActive    Boolean @default(true)
  priority    Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("categorization_rules")
}

// ================================
// IMPORT SYSTEM
// ================================

model ImportJob {
  id            String @id @default(uuid())
  fileName      String
  fileSize      Int
  fileHash      String
  format        String @default("N26_CSV")
  status        ImportStatus @default(PENDING)
  
  // Statistics
  totalRows     Int?
  validRows     Int?
  errorRows     Int?
  duplicateRows Int?
  importedRows  Int?
  
  // Metadata
  errors        Json?
  metadata      Json?
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transactions  Transaction[]

  @@map("import_jobs")
}

// ================================
// BUDGETS AND GOALS
// ================================

model Budget {
  id          String @id @default(uuid())
  name        String
  categoryId  String?
  amount      Float
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("budgets")
}

// ================================
// SETTINGS AND PREFERENCES
// ================================

model Setting {
  id        String @id @default(uuid())
  key       String @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// ================================
// ENUMS
// ================================

enum CategoryType {
  INCOME              // Ingresos
  ESSENTIAL_EXPENSE   // Gastos Esenciales
  DISCRETIONARY_EXPENSE // Gastos Discrecionales
  DEBT_PAYMENT        // Pago de Deudas
  SAVINGS             // Ahorros
  INVESTMENT          // Inversiones
}

enum RuleOperator {
  EQUALS
  CONTAINS
  STARTS_WITH
  ENDS_WITH
  REGEX
  GREATER_THAN
  LESS_THAN
  BETWEEN
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}