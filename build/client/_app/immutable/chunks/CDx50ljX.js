import{v as f,w as y}from"./J53a5pXB.js";const c="http://localhost:3008/api";function g(){const{subscribe:n,set:i,update:d}=y([]);return{subscribe:n,async load(){try{const r=await fetch(`${c}/transactions?includeHidden=true`);if(!r.ok)throw new Error(`Failed to load transactions: ${r.status}`);const t=await r.json();if(t.success&&t.data.transactions){const e=t.data.transactions.map(w).filter(o=>o!==void 0);i(e)}else i([])}catch(r){console.error("‚ùå Failed to load transactions from API:",r),i([])}},async add(r){try{const t=await fetch(`${c}/transactions`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({amount:Math.abs(r.amount),currency:"EUR",date:r.date.split("T")[0],merchant:r.merchant,type:r.amount<0?"EXPENSE":"INCOME",description:r.description||""})});if(!t.ok){const o=await t.json();throw new Error(o.error||"Failed to create transaction")}const e=await t.json();if(e.success){const o=w(e.data);return d(a=>[o,...a]),o}}catch(t){throw console.error("Failed to add transaction:",t),t}},async update(r,t){let e;d(o=>{if(e=o.find(s=>s.id===r),!e)return o;const a={...e};return Object.keys(t).forEach(s=>{t[s]!==void 0&&(a[s]=t[s])}),o.map(s=>s.id===r?a:s)});try{const o={};t.description!==void 0&&(o.description=t.description),t.hidden!==void 0&&(o.hidden=t.hidden),t.categoryId!==void 0&&(o.categoryId=t.categoryId,console.log("üîÑ Setting categoryId in payload:",t.categoryId)),t.observations!==void 0&&(o.observations=t.observations),t.amount!==void 0&&(o.amount=Math.abs(t.amount),o.type=t.amount<0?"EXPENSE":"INCOME"),console.log("üöÄ Sending update request:",{transactionId:r,payload:o,originalUpdates:t});const a=await fetch(`${c}/transactions/${r}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!a.ok){const u=await a.json();throw new Error(u.error||"Failed to update transaction")}const s=await a.json(),l=w(s.data);d(u=>u.map(h=>h.id===r?l:h).filter(h=>h!==void 0))}catch(o){throw console.error("Failed to update transaction:",o),e&&d(a=>a.map(s=>s.id===r?e:s).filter(s=>s!==void 0)),o}},async delete(r){try{const t=await fetch(`${c}/transactions/${r}`,{method:"DELETE"});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to delete transaction")}d(e=>e.filter(o=>o.id!==r))}catch(t){throw console.error("Failed to delete transaction:",t),t}},async bulkUpdate(r,t){try{for(const e of r)await this.update(e,t)}catch(e){throw console.error("Failed to bulk update transactions:",e),e}},async smartCategorize(r,t,e={}){try{const o=await fetch(`${c}/transactions/${r}/categorize`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({categoryId:t,applyToAll:e.applyToAll||!1,applyToFuture:e.applyToFuture??!0,createPattern:e.createPattern??!0})});if(!o.ok){const s=await o.json();throw new Error(s.error||"Failed to categorize transaction")}const a=await o.json();return a.success&&a.categorizedCount>0&&await this.load(),a}catch(o){throw console.error("Failed to smart categorize:",o),o}},async applyCategoryToPattern(r,t){return this.smartCategorize(r.id,t,{applyToAll:!0})},async importFile(r,t={}){try{const e=new FormData;e.append("file",r),e.append("currency",t.currency||"EUR"),e.append("duplicateDetectionEnabled",String(t.duplicateDetectionEnabled??!0)),e.append("skipDuplicates",String(t.skipDuplicates??!0)),e.append("autoCategorizationEnabled",String(t.autoCategorizationEnabled??!0));const o=await fetch(`${c}/import/csv`,{method:"POST",body:e});if(!o.ok){const s=await o.json();throw new Error(s.error||"Failed to import file")}const a=await o.json();return await this.load(),a.data}catch(e){throw console.error("Failed to import file:",e),e}},async generateHashes(r){try{const t=await fetch(`${c}/import/generate-hashes`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({transactions:r})});if(!t.ok){const o=await t.json();throw new Error(o.error||"Failed to generate hashes")}return(await t.json()).data}catch(t){throw console.error("‚ùå Frontend: Failed to generate hashes:",t),t}},async checkDuplicates(r){try{const t=await fetch(`${c}/import/check-duplicates`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({hashes:r})});if(!t.ok){const o=await t.json();throw new Error(o.error||"Failed to check duplicates")}return(await t.json()).data}catch(t){throw console.error("‚ùå Frontend: Failed to check duplicates:",t),t}},async importSelectedTransactions(r){try{const t={transactions:r.map(a=>({hash:a.hash,date:a.date,merchant:a.partner&&a.partner.trim().length>=2?a.partner.trim():"Unknown Merchant",amount:a.amount,description:a.description||"",currency:"EUR"})),currency:"EUR",duplicateDetectionEnabled:!0,skipDuplicates:!0,autoCategorizationEnabled:!0},e=await fetch(`${c}/import/selected`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const a=await e.json();throw new Error(a.error||"Failed to import selected transactions")}const o=await e.json();return await this.load(),o.data}catch(t){throw console.error("Failed to import selected transactions:",t),t}},async getStats(r,t,e="EUR"){try{const o=new URLSearchParams({startDate:r||"2020-01-01",endDate:t||"2030-12-31",currency:e}),a=await fetch(`${c}/transactions/statistics?${o}`);if(!a.ok)throw new Error("Failed to get statistics");return(await a.json()).data}catch(o){return console.error("Failed to get statistics:",o),{totalIncome:0,totalExpenses:0,totalInvestments:0,transactionCount:0}}}}}function p(n){return{id:n.id,name:n.name,type:n.type,color:n.color||"#3B82F6",icon:n.icon||"üí∞",annualBudget:0}}function w(n){return{id:n.id,date:n.date,time:new Date(n.createdAt).toLocaleTimeString("es-ES",{hour:"2-digit",minute:"2-digit",hour12:!1}),merchant:n.merchant,description:n.description||"",amount:n.type==="EXPENSE"?-n.amount:n.amount,categoryId:n.categoryId,category:void 0,status:"completed",tags:[],patternHash:void 0,hash:n.hash,createdAt:new Date(n.createdAt),updatedAt:new Date(n.updatedAt||n.createdAt),hidden:n.hidden||!1,observations:n.observations||void 0}}function E(){const{subscribe:n,set:i,update:d}=y([]);return{subscribe:n,async load(){try{const r=await fetch(`${c}/categories`);if(!r.ok)throw new Error(`Failed to load categories: ${r.status}`);const t=await r.json();if(t.success&&t.data){const e=t.data.map(p);i(e)}else console.warn("No categories found, setting empty array"),i([])}catch(r){console.error("‚ùå Failed to load categories from API:",r),i([])}},async add(r){try{const t=await fetch(`${c}/categories`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:r.name,type:r.type,color:r.color||"#3B82F6",icon:r.icon||"üí∞",annualBudget:r.annualBudget||0})});if(!t.ok){const o=await t.json();throw new Error(o.error||"Failed to create category")}const e=await t.json();if(e.success){const o=p(e.data);return d(a=>[...a,o]),o}}catch(t){throw console.error("Failed to add category:",t),t}},async update(r,t){try{const e=await fetch(`${c}/categories/${r}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok){const a=await e.json();throw new Error(a.error||"Failed to update category")}const o=await e.json();if(o.success){const a=p(o.data);d(s=>s.map(l=>l.id===r?a:l))}}catch(e){throw console.error("Failed to update category:",e),e}},async delete(r){try{const t=await fetch(`${c}/categories/${r}`,{method:"DELETE"});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to delete category")}d(e=>e.filter(o=>o.id!==r))}catch(t){throw console.error("Failed to delete category:",t),t}},async clear(){try{const r=await fetch(`${c}/categories`,{method:"DELETE"});if(!r.ok){const t=await r.json();throw new Error(t.error||"Failed to clear categories")}i([])}catch(r){throw console.error("Failed to clear categories:",r),r}}}}const m=g(),j=E(),F=y(new Set);f([m,F],([n,i])=>({all:n,selected:n.filter(d=>i.has(d.id))}));f(m,n=>{const i=n.filter(e=>!e.hidden),d=i.filter(e=>e.amount>0).reduce((e,o)=>e+o.amount,0),r=i.filter(e=>e.amount<0).reduce((e,o)=>e+Math.abs(o.amount),0),t=d-r;return{income:d,expenses:r,balance:t,transactionCount:i.length}});export{m as a,F as b,j as c};
