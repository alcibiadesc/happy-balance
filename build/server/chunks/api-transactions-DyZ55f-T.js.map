{"version":3,"file":"api-transactions-DyZ55f-T.js","sources":["../../../.svelte-kit/adapter-node/chunks/api-transactions.js"],"sourcesContent":["import { d as derived, w as writable } from \"./index.js\";\nconst API_BASE = \"http://localhost:3008/api\";\nfunction createApiTransactionStore() {\n  const { subscribe, set, update } = writable([]);\n  return {\n    subscribe,\n    // Load transactions from API\n    async load() {\n      try {\n        const response = await fetch(\n          `${API_BASE}/transactions?includeHidden=true`\n        );\n        if (!response.ok) {\n          throw new Error(`Failed to load transactions: ${response.status}`);\n        }\n        const result = await response.json();\n        if (result.success && result.data.transactions) {\n          const transactions = result.data.transactions.map(mapApiToTransaction).filter(\n            (t) => t !== void 0\n          );\n          set(transactions);\n        } else {\n          set([]);\n        }\n      } catch (error) {\n        console.error(\"‚ùå Failed to load transactions from API:\", error);\n        set([]);\n      }\n    },\n    // Add new transaction\n    async add(transaction) {\n      try {\n        const response = await fetch(`${API_BASE}/transactions`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            amount: Math.abs(transaction.amount),\n            currency: \"EUR\",\n            // Default currency\n            date: transaction.date.split(\"T\")[0],\n            // Format as YYYY-MM-DD\n            merchant: transaction.merchant,\n            type: transaction.amount < 0 ? \"EXPENSE\" : \"INCOME\",\n            description: transaction.description || \"\"\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to create transaction\");\n        }\n        const result = await response.json();\n        if (result.success) {\n          const newTransaction = mapApiToTransaction(result.data);\n          update((transactions) => [newTransaction, ...transactions]);\n          return newTransaction;\n        }\n      } catch (error) {\n        console.error(\"Failed to add transaction:\", error);\n        throw error;\n      }\n    },\n    // Update transaction with optimistic updates\n    async update(id, updates) {\n      let originalTransaction;\n      update((transactions) => {\n        originalTransaction = transactions.find((t) => t.id === id);\n        if (!originalTransaction) return transactions;\n        const updatedTransaction = { ...originalTransaction };\n        Object.keys(updates).forEach((key) => {\n          if (updates[key] !== void 0) {\n            updatedTransaction[key] = updates[key];\n          }\n        });\n        return transactions.map((t) => t.id === id ? updatedTransaction : t);\n      });\n      try {\n        const payload = {};\n        if (updates.description !== void 0) payload.description = updates.description;\n        if (updates.hidden !== void 0) payload.hidden = updates.hidden;\n        if (updates.categoryId !== void 0) {\n          payload.categoryId = updates.categoryId;\n          console.log(\"üîÑ Setting categoryId in payload:\", updates.categoryId);\n        }\n        if (updates.observations !== void 0) payload.observations = updates.observations;\n        if (updates.amount !== void 0) {\n          payload.amount = Math.abs(updates.amount);\n          payload.type = updates.amount < 0 ? \"EXPENSE\" : \"INCOME\";\n        }\n        console.log(\"üöÄ Sending update request:\", {\n          transactionId: id,\n          payload,\n          originalUpdates: updates\n        });\n        const response = await fetch(`${API_BASE}/transactions/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(payload)\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to update transaction\");\n        }\n        const result = await response.json();\n        const updatedTransaction = mapApiToTransaction(result.data);\n        update(\n          (transactions) => transactions.map((t) => t.id === id ? updatedTransaction : t).filter(\n            (t) => t !== void 0\n          )\n        );\n      } catch (error) {\n        console.error(\"Failed to update transaction:\", error);\n        if (originalTransaction) {\n          update(\n            (transactions) => transactions.map((t) => t.id === id ? originalTransaction : t).filter(\n              (t) => t !== void 0\n            )\n          );\n        }\n        throw error;\n      }\n    },\n    // Delete transaction\n    async delete(id) {\n      try {\n        const response = await fetch(`${API_BASE}/transactions/${id}`, {\n          method: \"DELETE\"\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to delete transaction\");\n        }\n        update((transactions) => transactions.filter((t) => t.id !== id));\n      } catch (error) {\n        console.error(\"Failed to delete transaction:\", error);\n        throw error;\n      }\n    },\n    // Bulk update transactions (for now, update one by one - can be optimized later)\n    async bulkUpdate(ids, updates) {\n      try {\n        for (const id of ids) {\n          await this.update(id, updates);\n        }\n      } catch (error) {\n        console.error(\"Failed to bulk update transactions:\", error);\n        throw error;\n      }\n    },\n    // Smart categorization with pattern matching\n    async smartCategorize(transactionId, categoryId, options = {}) {\n      try {\n        const response = await fetch(\n          `${API_BASE}/transactions/${transactionId}/categorize`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              categoryId,\n              applyToAll: options.applyToAll || false,\n              applyToFuture: options.applyToFuture ?? true,\n              createPattern: options.createPattern ?? true\n            })\n          }\n        );\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to categorize transaction\");\n        }\n        const result = await response.json();\n        if (result.success && result.categorizedCount > 0) {\n          await this.load();\n        }\n        return result;\n      } catch (error) {\n        console.error(\"Failed to smart categorize:\", error);\n        throw error;\n      }\n    },\n    // Apply category to pattern (backwards compatibility)\n    async applyCategoryToPattern(transaction, categoryId) {\n      return this.smartCategorize(transaction.id, categoryId, {\n        applyToAll: true\n      });\n    },\n    // Import from file\n    async importFile(file, options = {}) {\n      try {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"currency\", options.currency || \"EUR\");\n        formData.append(\n          \"duplicateDetectionEnabled\",\n          String(options.duplicateDetectionEnabled ?? true)\n        );\n        formData.append(\n          \"skipDuplicates\",\n          String(options.skipDuplicates ?? true)\n        );\n        formData.append(\n          \"autoCategorizationEnabled\",\n          String(options.autoCategorizationEnabled ?? true)\n        );\n        const response = await fetch(`${API_BASE}/import/csv`, {\n          method: \"POST\",\n          body: formData\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to import file\");\n        }\n        const result = await response.json();\n        await this.load();\n        return result.data;\n      } catch (error) {\n        console.error(\"Failed to import file:\", error);\n        throw error;\n      }\n    },\n    // Generate hashes using backend service\n    async generateHashes(transactions) {\n      try {\n        const response = await fetch(`${API_BASE}/import/generate-hashes`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ transactions })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to generate hashes\");\n        }\n        const result = await response.json();\n        return result.data;\n      } catch (error) {\n        console.error(\"‚ùå Frontend: Failed to generate hashes:\", error);\n        throw error;\n      }\n    },\n    // Check which hashes are duplicates\n    async checkDuplicates(hashes) {\n      try {\n        const response = await fetch(`${API_BASE}/import/check-duplicates`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ hashes })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to check duplicates\");\n        }\n        const result = await response.json();\n        return result.data;\n      } catch (error) {\n        console.error(\"‚ùå Frontend: Failed to check duplicates:\", error);\n        throw error;\n      }\n    },\n    // Import selected transactions only\n    async importSelectedTransactions(selectedTransactions) {\n      try {\n        const requestBody = {\n          transactions: selectedTransactions.map((tx) => ({\n            hash: tx.hash,\n            date: tx.date,\n            merchant: tx.partner && tx.partner.trim().length >= 2 ? tx.partner.trim() : \"Unknown Merchant\",\n            amount: tx.amount,\n            description: tx.description || \"\",\n            currency: \"EUR\"\n          })),\n          currency: \"EUR\",\n          duplicateDetectionEnabled: true,\n          skipDuplicates: true,\n          autoCategorizationEnabled: true\n        };\n        const response = await fetch(`${API_BASE}/import/selected`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(\n            error.error || \"Failed to import selected transactions\"\n          );\n        }\n        const result = await response.json();\n        await this.load();\n        return result.data;\n      } catch (error) {\n        console.error(\"Failed to import selected transactions:\", error);\n        throw error;\n      }\n    },\n    // Get statistics\n    async getStats(startDate, endDate, currency = \"EUR\") {\n      try {\n        const params = new URLSearchParams({\n          startDate: startDate || \"2020-01-01\",\n          endDate: endDate || \"2030-12-31\",\n          currency\n        });\n        const response = await fetch(\n          `${API_BASE}/transactions/statistics?${params}`\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to get statistics\");\n        }\n        const result = await response.json();\n        return result.data;\n      } catch (error) {\n        console.error(\"Failed to get statistics:\", error);\n        return {\n          totalIncome: 0,\n          totalExpenses: 0,\n          totalInvestments: 0,\n          transactionCount: 0\n        };\n      }\n    }\n  };\n}\nfunction mapApiToCategory(apiCategory) {\n  return {\n    id: apiCategory.id,\n    name: apiCategory.name,\n    type: apiCategory.type,\n    color: apiCategory.color || \"#3B82F6\",\n    icon: apiCategory.icon || \"üí∞\",\n    annualBudget: 0\n    // API doesn't have annualBudget yet, keeping for frontend compatibility\n  };\n}\nfunction mapApiToTransaction(apiTransaction) {\n  return {\n    id: apiTransaction.id,\n    date: apiTransaction.date,\n    time: new Date(apiTransaction.createdAt).toLocaleTimeString(\"es-ES\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false\n    }),\n    merchant: apiTransaction.merchant,\n    description: apiTransaction.description || \"\",\n    amount: apiTransaction.type === \"EXPENSE\" ? -apiTransaction.amount : apiTransaction.amount,\n    categoryId: apiTransaction.categoryId,\n    category: void 0,\n    // Will be populated separately if needed\n    status: \"completed\",\n    tags: [],\n    patternHash: void 0,\n    hash: apiTransaction.hash,\n    createdAt: new Date(apiTransaction.createdAt),\n    updatedAt: new Date(apiTransaction.updatedAt || apiTransaction.createdAt),\n    hidden: apiTransaction.hidden || false,\n    observations: apiTransaction.observations || void 0\n  };\n}\nfunction createApiCategoryStore() {\n  const { subscribe, set, update } = writable([]);\n  return {\n    subscribe,\n    async load() {\n      try {\n        const response = await fetch(`${API_BASE}/categories`);\n        if (!response.ok) {\n          throw new Error(`Failed to load categories: ${response.status}`);\n        }\n        const result = await response.json();\n        if (result.success && result.data) {\n          const categories = result.data.map(mapApiToCategory);\n          set(categories);\n        } else {\n          console.warn(\"No categories found, setting empty array\");\n          set([]);\n        }\n      } catch (error) {\n        console.error(\"‚ùå Failed to load categories from API:\", error);\n        set([]);\n      }\n    },\n    async add(category) {\n      try {\n        const response = await fetch(`${API_BASE}/categories`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: category.name,\n            type: category.type,\n            color: category.color || \"#3B82F6\",\n            icon: category.icon || \"üí∞\",\n            annualBudget: category.annualBudget || 0\n          })\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to create category\");\n        }\n        const result = await response.json();\n        if (result.success) {\n          const newCategory = mapApiToCategory(result.data);\n          update((categories) => [...categories, newCategory]);\n          return newCategory;\n        }\n      } catch (error) {\n        console.error(\"Failed to add category:\", error);\n        throw error;\n      }\n    },\n    async update(id, updates) {\n      try {\n        const response = await fetch(`${API_BASE}/categories/${id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(updates)\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to update category\");\n        }\n        const result = await response.json();\n        if (result.success) {\n          const updatedCategory = mapApiToCategory(result.data);\n          update(\n            (categories) => categories.map((c) => c.id === id ? updatedCategory : c)\n          );\n        }\n      } catch (error) {\n        console.error(\"Failed to update category:\", error);\n        throw error;\n      }\n    },\n    async delete(id) {\n      try {\n        const response = await fetch(`${API_BASE}/categories/${id}`, {\n          method: \"DELETE\"\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to delete category\");\n        }\n        update((categories) => categories.filter((c) => c.id !== id));\n      } catch (error) {\n        console.error(\"Failed to delete category:\", error);\n        throw error;\n      }\n    },\n    async clear() {\n      try {\n        const response = await fetch(`${API_BASE}/categories`, {\n          method: \"DELETE\"\n        });\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to clear categories\");\n        }\n        set([]);\n      } catch (error) {\n        console.error(\"Failed to clear categories:\", error);\n        throw error;\n      }\n    }\n  };\n}\nconst apiTransactions = createApiTransactionStore();\nconst apiCategories = createApiCategoryStore();\nconst apiSelectedTransactions = writable(/* @__PURE__ */ new Set());\nderived(\n  [apiTransactions, apiSelectedTransactions],\n  ([$transactions, $selected]) => {\n    return {\n      all: $transactions,\n      selected: $transactions.filter((t) => $selected.has(t.id))\n    };\n  }\n);\nderived(apiTransactions, ($transactions) => {\n  const visibleTransactions = $transactions.filter((t) => !t.hidden);\n  const income = visibleTransactions.filter((t) => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);\n  const expenses = visibleTransactions.filter((t) => t.amount < 0).reduce((sum, t) => sum + Math.abs(t.amount), 0);\n  const balance = income - expenses;\n  return {\n    income,\n    expenses,\n    balance,\n    transactionCount: visibleTransactions.length\n  };\n});\nexport {\n  apiCategories as a,\n  apiSelectedTransactions as b,\n  apiTransactions as c\n};\n"],"names":[],"mappings":"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"}